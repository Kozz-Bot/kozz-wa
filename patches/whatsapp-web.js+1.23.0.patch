diff --git a/node_modules/whatsapp-web.js/index.d.ts b/node_modules/whatsapp-web.js/index.d.ts
index 38014be..3eb06e9 100644
--- a/node_modules/whatsapp-web.js/index.d.ts
+++ b/node_modules/whatsapp-web.js/index.d.ts
@@ -21,7 +21,7 @@ declare namespace WAWebJS {
         acceptInvite(inviteCode: string): Promise<string>
 
         /** Accepts a private invitation to join a group (v4 invite) */
-        acceptGroupV4Invite: (inviteV4: InviteV4Data) => Promise<{status: number}>
+        acceptGroupV4Invite: (inviteV4: InviteV4Data) => Promise<{ status: number }>
 
         /**Returns an object with information about the invite code's group */
         getInviteInfo(inviteCode: string): Promise<object>
@@ -36,7 +36,7 @@ declare namespace WAWebJS {
         unpinChat(chatId: string): Promise<boolean>
 
         /** Creates a new group */
-        createGroup(title: string, participants?: string | Contact | Contact[] | string[], options?: CreateGroupOptions): Promise<CreateGroupResult|string>
+        createGroup(title: string, participants?: string | Contact | Contact[] | string[], options?: CreateGroupOptions): Promise<CreateGroupResult | string>
 
         /** Closes the client */
         destroy(): Promise<void>
@@ -72,7 +72,7 @@ declare namespace WAWebJS {
         getLabels(): Promise<Label[]>
 
         /** Change labels in chats  */
-        addOrRemoveLabels(labelIds: Array<number|string>, chatIds: Array<string>): Promise<void>
+        addOrRemoveLabels(labelIds: Array<number | string>, chatIds: Array<string>): Promise<void>
 
         /** Get Label instance by ID */
         getLabelById(labelId: string): Promise<Label>
@@ -235,11 +235,11 @@ declare namespace WAWebJS {
             /** Message with more information about the event. */
             message: Message,
             /** Old user's id. */
-            oldId : String,
+            oldId: String,
             /** New user's id. */
-            newId : String,
+            newId: String,
             /** Indicates if a contact or a group participant changed their phone number. */
-            isContact : Boolean
+            isContact: Boolean
         ) => void): this
 
         /** Emitted when media has been uploaded for a message sent by the client */
@@ -393,15 +393,15 @@ declare namespace WAWebJS {
         authTimeoutMs?: number,
         /** Puppeteer launch options. View docs here: https://github.com/puppeteer/puppeteer/ */
         puppeteer?: puppeteer.PuppeteerNodeLaunchOptions & puppeteer.ConnectOptions
-		/** Determines how to save and restore sessions. Will use LegacySessionAuth if options.session is set. Otherwise, NoAuth will be used. */
+        /** Determines how to save and restore sessions. Will use LegacySessionAuth if options.session is set. Otherwise, NoAuth will be used. */
         authStrategy?: AuthStrategy,
         /** The version of WhatsApp Web to use. Use options.webVersionCache to configure how the version is retrieved. */
         webVersion?: string,
         /**  Determines how to retrieve the WhatsApp Web version specified in options.webVersion. */
         webVersionCache?: WebCacheOptions,
         /** How many times should the qrcode be refreshed before giving up
-		 * @default 0 (disabled) */
-		qrMaxRetries?: number,
+         * @default 0 (disabled) */
+        qrMaxRetries?: number,
         /** 
          * @deprecated This option should be set directly on the LegacySessionAuth
          */
@@ -423,7 +423,7 @@ declare namespace WAWebJS {
          * @default 'ffmpeg' */
         ffmpegPath?: string,
         /** Object with proxy autentication requirements @default: undefined */
-        proxyAuthentication?: {username: string, password: string} | undefined
+        proxyAuthentication?: { username: string, password: string } | undefined
     }
 
     export interface LocalWebCacheOptions {
@@ -467,7 +467,7 @@ declare namespace WAWebJS {
      * No session restoring functionality
      * Will need to authenticate via QR code every time
      */
-    export class NoAuth extends AuthStrategy {}
+    export class NoAuth extends AuthStrategy { }
 
     /**
      * Local directory-based authentication
@@ -484,7 +484,7 @@ declare namespace WAWebJS {
     /**
      * Remote-based authentication
      */
-     export class RemoteAuth extends AuthStrategy {
+    export class RemoteAuth extends AuthStrategy {
         public clientId?: string;
         public dataPath?: string;
         constructor(options?: {
@@ -509,7 +509,7 @@ declare namespace WAWebJS {
      * Legacy session auth strategy
      * Not compatible with multi-device accounts.
      */
-     export class LegacySessionAuth extends AuthStrategy {
+    export class LegacySessionAuth extends AuthStrategy {
         constructor(options?: {
             session?: ClientSession,
             restartOnAuthFail?: boolean,
@@ -734,11 +734,11 @@ declare namespace WAWebJS {
     }
 
     export type MessageInfo = {
-        delivery: Array<{id: ContactId, t: number}>,
+        delivery: Array<{ id: ContactId, t: number }>,
         deliveryRemaining: number,
-        played: Array<{id: ContactId, t: number}>,
+        played: Array<{ id: ContactId, t: number }>,
         playedRemaining: number,
-        read: Array<{id: ContactId, t: number}>,
+        read: Array<{ id: ContactId, t: number }>,
         readRemaining: number
     }
 
@@ -780,149 +780,150 @@ declare namespace WAWebJS {
      *   mentionedIds: []
      * }
      */
-    export interface Message {
+    export class Message {
+        constructor(client: Client, data: any);
         /** ACK status for the message */
-        ack: MessageAck,
+        ack: MessageAck;
         /** If the message was sent to a group, this field will contain the user that sent the message. */
-        author?: string,
+        author?: string;
         /** String that represents from which device type the message was sent */
-        deviceType: string,
+        deviceType: string;
         /** Message content */
-        body: string,
+        body: string;
         /** Indicates if the message was a broadcast */
-        broadcast: boolean,
+        broadcast: boolean;
         /** Indicates if the message was a status update */
-        isStatus: boolean,
+        isStatus: boolean;
         /** Indicates if the message is a Gif */
-        isGif: boolean,
+        isGif: boolean;
         /** Indicates if the message will disappear after it expires */
-        isEphemeral: boolean,
+        isEphemeral: boolean;
         /** ID for the Chat that this message was sent to, except if the message was sent by the current user */
-        from: string,
+        from: string;
         /** Indicates if the message was sent by the current user */
-        fromMe: boolean,
+        fromMe: boolean;
         /** Indicates if the message has media available for download */
-        hasMedia: boolean,
+        hasMedia: boolean;
         /** Indicates if the message was sent as a reply to another message */
-        hasQuotedMsg: boolean,
+        hasQuotedMsg: boolean;
         /** Indicates whether there are reactions to the message */
-        hasReaction: boolean,
+        hasReaction: boolean;
         /** Indicates the duration of the message in seconds */
-        duration: string,
+        duration: string;
         /** ID that represents the message */
-        id: MessageId,
+        id: MessageId;
         /** Indicates if the message was forwarded */
-        isForwarded: boolean,
+        isForwarded: boolean;
         /**
          * Indicates how many times the message was forwarded.
          * The maximum value is 127.
          */
-        forwardingScore: number,
+        forwardingScore: number;
         /** Indicates if the message was starred */
-        isStarred: boolean,
+        isStarred: boolean;
         /** Location information contained in the message, if the message is type "location" */
-        location: Location,
+        location: Location;
         /** List of vCards contained in the message */
-        vCards: string[],
+        vCards: string[];
         /** Invite v4 info */
-        inviteV4?: InviteV4Data,
+        inviteV4?: InviteV4Data;
         /** MediaKey that represents the sticker 'ID' */
-        mediaKey?: string,
+        mediaKey?: string;
         /** Indicates the mentions in the message body. */
-        mentionedIds: [],
+        mentionedIds: [];
         /** Unix timestamp for when the message was created */
-        timestamp: number,
+        timestamp: number;
         /**
          * ID for who this message is for.
          * If the message is sent by the current user, it will be the Chat to which the message is being sent.
          * If the message is sent by another user, it will be the ID for the current user.
          */
-        to: string,
+        to: string;
         /** Message type */
-        type: MessageTypes,
+        type: MessageTypes;
         /** Links included in the message. */
         links: Array<{
             link: string,
             isSuspicious: boolean
-        }>,
+        }>;
         /** Order ID */
-        orderId: string,
+        orderId: string;
         /** title */
-        title?: string,
+        title?: string;
         /** description*/
-        description?: string,
+        description?: string;
         /** Business Owner JID */
-        businessOwnerJid?: string,
+        businessOwnerJid?: string;
         /** Product JID */
-        productId?: string,
+        productId?: string;
         /** Last edit time */
-        latestEditSenderTimestampMs?: number,
+        latestEditSenderTimestampMs?: number;
         /** Last edit message author */
-        latestEditMsgKey?: MessageId,
+        latestEditMsgKey?: MessageId;
         /** Message buttons */
-        dynamicReplyButtons?: object,
+        dynamicReplyButtons?: object;
         /** Selected button ID */
-        selectedButtonId?: string,
+        selectedButtonId?: string;
         /** Selected list row ID */
-        selectedRowId?: string,
+        selectedRowId?: string;
         /** Returns message in a raw format */
-        rawData: object,
-        pollName: string,
+        rawData: object;
+        pollName: string;
         /** Avaiaible poll voting options */
-        pollOptions: string[],
+        pollOptions: string[];
         /** False for a single choice poll, true for a multiple choice poll */
-        allowMultipleAnswers: boolean,
+        allowMultipleAnswers: boolean;
         /* 
         * Reloads this Message object's data in-place with the latest values from WhatsApp Web. 
         * Note that the Message must still be in the web app cache for this to work, otherwise will return null.
         */
-        reload: () => Promise<Message>,
+        reload: () => Promise<Message>;
         /** Accept the Group V4 Invite in message */
-        acceptGroupV4Invite: () => Promise<{status: number}>,
+        acceptGroupV4Invite: () => Promise<{ status: number }>;
         /** Deletes the message from the chat */
-        delete: (everyone?: boolean) => Promise<void>,
+        delete: (everyone?: boolean) => Promise<void>;
         /** Downloads and returns the attached message media */
-        downloadMedia: () => Promise<MessageMedia>,
+        downloadMedia: () => Promise<MessageMedia>;
         /** Returns the Chat this message was sent in */
-        getChat: () => Promise<Chat>,
+        getChat: () => Promise<Chat>;
         /** Returns the Contact this message was sent from */
-        getContact: () => Promise<Contact>,
+        getContact: () => Promise<Contact>;
         /** Returns the Contacts mentioned in this message */
-        getMentions: () => Promise<Contact[]>,
+        getMentions: () => Promise<Contact[]>;
         /** Returns the quoted message, if any */
-        getQuotedMessage: () => Promise<Message>,
+        getQuotedMessage: () => Promise<Message>;
         /** 
          * Sends a message as a reply to this message. 
          * If chatId is specified, it will be sent through the specified Chat.
          * If not, it will send the message in the same Chat as the original message was sent. 
          */
-        reply: (content: MessageContent, chatId?: string, options?: MessageSendOptions) => Promise<Message>,
+        reply: (content: MessageContent, chatId?: string, options?: MessageSendOptions) => Promise<Message>;
         /** React to this message with an emoji*/
-        react: (reaction: string) => Promise<void>,
+        react: (reaction: string) => Promise<void>;
         /** 
          * Forwards this message to another chat (that you chatted before, otherwise it will fail)
          */
-        forward: (chat: Chat | string) => Promise<void>,
+        forward: (chat: Chat | string) => Promise<void>;
         /** Star this message */
-        star: () => Promise<void>,
+        star: () => Promise<void>;
         /** Unstar this message */
-        unstar: () => Promise<void>,
+        unstar: () => Promise<void>;
         /** Get information about message delivery status */
-        getInfo: () => Promise<MessageInfo | null>,
+        getInfo: () => Promise<MessageInfo | null>;
         /**
          * Gets the order associated with a given message
          */
-        getOrder: () => Promise<Order>,
+        getOrder: () => Promise<Order>;
         /**
          * Gets the payment details associated with a given message
          */
-        getPayment: () => Promise<Payment>,
+        getPayment: () => Promise<Payment>;
         /**
          * Gets the reactions associated with the given message
          */
-        getReactions: () => Promise<ReactionList[]>,
+        getReactions: () => Promise<ReactionList[]>;
         /** Edits the current message */
-        edit: (content: MessageContent, options?: MessageEditOptions) => Promise<Message | null>,
+        edit: (content: MessageContent, options?: MessageEditOptions) => Promise<Message | null>;
     }
 
     /** ID that represents a message */
@@ -1332,7 +1333,7 @@ declare namespace WAWebJS {
          * will be added). If sleep is a number, a sleep time equal to its value will be added
          * @default [250,500]
          */
-        sleep?: Array<number>|number,
+        sleep?: Array<number> | number,
         /**
          * If true, the inviteV4 will be sent to those participants
          * who have restricted others from being automatically added to groups,
@@ -1389,7 +1390,7 @@ declare namespace WAWebJS {
         /** Group participants */
         participants: Array<GroupParticipant>;
         /** Adds a list of participants by ID to the group */
-        addParticipants: (participantIds: string|string[], options?: AddParticipantsOptions) => Promise<Object.<string, AddParticipantsResult>|string>;
+        addParticipants: (participantIds: string | string[], options?: AddParticipantsOptions) => Promise<Object.<string, AddParticipantsResult> | string>;
         /** Removes a list of participants by ID to the group */
         removeParticipants: (participantIds: string[]) => Promise<{ status: number }>;
         /** Promotes participants by IDs to admins */
@@ -1555,17 +1556,17 @@ declare namespace WAWebJS {
         /** Payment currency */
         paymentCurrency: string,
         /** Payment ammount  */
-        paymentAmount1000 : number,
+        paymentAmount1000: number,
         /** Payment receiver */
-        paymentMessageReceiverJid : object,
+        paymentMessageReceiverJid: object,
         /** Payment transaction timestamp */
-        paymentTransactionTimestamp : number,
+        paymentTransactionTimestamp: number,
         /** Payment paymentStatus */
-        paymentStatus : number,
+        paymentStatus: number,
         /** Integer that represents the payment Text */
-        paymentTxnStatus  : number,
+        paymentTxnStatus: number,
         /** The note sent with the payment */
-        paymentNote  : string;
+        paymentNote: string;
     }
 
     /**
@@ -1622,7 +1623,7 @@ declare namespace WAWebJS {
     /** Message type Buttons */
     export class Buttons {
         body: string | MessageMedia
-        buttons: Array<{ buttonId: string; buttonText: {displayText: string}; type: number }>
+        buttons: Array<{ buttonId: string; buttonText: { displayText: string }; type: number }>
         title?: string | null
         footer?: string | null
 
