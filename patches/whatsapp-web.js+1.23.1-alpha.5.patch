diff --git a/node_modules/whatsapp-web.js/index.d.ts b/node_modules/whatsapp-web.js/index.d.ts
index 329a419..0ac6b86 100644
--- a/node_modules/whatsapp-web.js/index.d.ts
+++ b/node_modules/whatsapp-web.js/index.d.ts
@@ -808,56 +808,58 @@ declare namespace WAWebJS {
      *   mentionedIds: []
      * }
      */
-    export interface Message {
+    export class Message {
+        constructor(client: Client, messageData: any): Message;
+
         /** ACK status for the message */
-        ack: MessageAck,
+        ack: MessageAck;
         /** If the message was sent to a group, this field will contain the user that sent the message. */
-        author?: string,
+        author?: string;
         /** String that represents from which device type the message was sent */
-        deviceType: string,
+        deviceType: string;
         /** Message content */
-        body: string,
+        body: string;
         /** Indicates if the message was a broadcast */
-        broadcast: boolean,
+        broadcast: boolean;
         /** Indicates if the message was a status update */
-        isStatus: boolean,
+        isStatus: boolean;
         /** Indicates if the message is a Gif */
-        isGif: boolean,
+        isGif: boolean;
         /** Indicates if the message will disappear after it expires */
-        isEphemeral: boolean,
+        isEphemeral: boolean;
         /** ID for the Chat that this message was sent to, except if the message was sent by the current user */
-        from: string,
+        from: string;
         /** Indicates if the message was sent by the current user */
-        fromMe: boolean,
+        fromMe: boolean;
         /** Indicates if the message has media available for download */
-        hasMedia: boolean,
+        hasMedia: boolean;
         /** Indicates if the message was sent as a reply to another message */
-        hasQuotedMsg: boolean,
+        hasQuotedMsg: boolean;
         /** Indicates whether there are reactions to the message */
-        hasReaction: boolean,
+        hasReaction: boolean;
         /** Indicates the duration of the message in seconds */
-        duration: string,
+        duration: string;
         /** ID that represents the message */
-        id: MessageId,
+        id: MessageId;
         /** Indicates if the message was forwarded */
-        isForwarded: boolean,
+        isForwarded: boolean;
         /**
          * Indicates how many times the message was forwarded.
          * The maximum value is 127.
          */
-        forwardingScore: number,
+        forwardingScore: number;
         /** Indicates if the message was starred */
-        isStarred: boolean,
+        isStarred: boolean;
         /** Location information contained in the message, if the message is type "location" */
-        location: Location,
+        location: Location;
         /** List of vCards contained in the message */
-        vCards: string[],
+        vCards: string[];
         /** Invite v4 info */
-        inviteV4?: InviteV4Data,
+        inviteV4?: InviteV4Data;
         /** MediaKey that represents the sticker 'ID' */
-        mediaKey?: string,
+        mediaKey?: string;
         /** Indicates the mentions in the message body. */
-        mentionedIds: ChatId[],
+        mentionedIds: ChatId[];
         /** Indicates whether there are group mentions in the message body */
         groupMentions: {
             groupSubject: string;
@@ -866,106 +868,106 @@ declare namespace WAWebJS {
                 user: string;
                 _serialized: string;
             };
-        }[],
+        }[];
         /** Unix timestamp for when the message was created */
-        timestamp: number,
+        timestamp: number;
         /**
          * ID for who this message is for.
          * If the message is sent by the current user, it will be the Chat to which the message is being sent.
          * If the message is sent by another user, it will be the ID for the current user.
          */
-        to: string,
+        to: string;
         /** Message type */
-        type: MessageTypes,
+        type: MessageTypes;
         /** Links included in the message. */
         links: Array<{
             link: string,
             isSuspicious: boolean
-        }>,
+        }>;
         /** Order ID */
-        orderId: string,
+        orderId: string;
         /** title */
-        title?: string,
+        title?: string;
         /** description*/
-        description?: string,
+        description?: string;
         /** Business Owner JID */
-        businessOwnerJid?: string,
+        businessOwnerJid?: string;
         /** Product JID */
-        productId?: string,
+        productId?: string;
         /** Last edit time */
-        latestEditSenderTimestampMs?: number,
+        latestEditSenderTimestampMs?: number;
         /** Last edit message author */
-        latestEditMsgKey?: MessageId,
+        latestEditMsgKey?: MessageId;
         /** Message buttons */
-        dynamicReplyButtons?: object,
+        dynamicReplyButtons?: object;
         /** Selected button ID */
-        selectedButtonId?: string,
+        selectedButtonId?: string;
         /** Selected list row ID */
-        selectedRowId?: string,
+        selectedRowId?: string;
         /** Returns message in a raw format */
-        rawData: object,
-        pollName: string,
+        rawData: object;
+        pollName: string;
         /** Avaiaible poll voting options */
-        pollOptions: string[],
+        pollOptions: string[];
         /** False for a single choice poll, true for a multiple choice poll */
-        allowMultipleAnswers: boolean,
+        allowMultipleAnswers: boolean;
         /* 
         * Reloads this Message object's data in-place with the latest values from WhatsApp Web. 
         * Note that the Message must still be in the web app cache for this to work, otherwise will return null.
         */
-        reload: () => Promise<Message>,
+        reload: () => Promise<Message>;
         /** Accept the Group V4 Invite in message */
-        acceptGroupV4Invite: () => Promise<{status: number}>,
+        acceptGroupV4Invite: () => Promise<{status: number}>;
         /** Deletes the message from the chat */
-        delete: (everyone?: boolean) => Promise<void>,
+        delete: (everyone?: boolean) => Promise<void>;
         /** Downloads and returns the attached message media */
-        downloadMedia: () => Promise<MessageMedia>,
+        downloadMedia: () => Promise<MessageMedia>;
         /** Returns the Chat this message was sent in */
-        getChat: () => Promise<Chat>,
+        getChat: () => Promise<Chat>;
         /** Returns the Contact this message was sent from */
-        getContact: () => Promise<Contact>,
+        getContact: () => Promise<Contact>;
         /** Returns the Contacts mentioned in this message */
-        getMentions: () => Promise<Contact[]>,
+        getMentions: () => Promise<Contact[]>;
         /** Returns groups mentioned in this message */
-        getGroupMentions: () => Promise<GroupChat[]|[]>,
+        getGroupMentions: () => Promise<GroupChat[]|[]>;
         /** Returns the quoted message, if any */
-        getQuotedMessage: () => Promise<Message>,
+        getQuotedMessage: () => Promise<Message>;
         /** 
          * Sends a message as a reply to this message. 
          * If chatId is specified, it will be sent through the specified Chat.
          * If not, it will send the message in the same Chat as the original message was sent. 
          */
-        reply: (content: MessageContent, chatId?: string, options?: MessageSendOptions) => Promise<Message>,
+        reply: (content: MessageContent, chatId?: string, options?: MessageSendOptions) => Promise<Message>;
         /** React to this message with an emoji*/
-        react: (reaction: string) => Promise<void>,
+        react: (reaction: string) => Promise<void>;
         /** 
          * Forwards this message to another chat (that you chatted before, otherwise it will fail)
          */
-        forward: (chat: Chat | string) => Promise<void>,
+        forward: (chat: Chat | string) => Promise<void>;
         /** Star this message */
-        star: () => Promise<void>,
+        star: () => Promise<void>;
         /** Unstar this message */
-        unstar: () => Promise<void>,
+        unstar: () => Promise<void>;
         /** Pins the message (group admins can pin messages of all group members) */
-        pin: (duration: number) => Promise<boolean>,
+        pin: (duration: number) => Promise<boolean>;
         /** Unpins the message (group admins can unpin messages of all group members) */
-        unpin: () => Promise<boolean>,
+        unpin: () => Promise<boolean>;
         /** Get information about message delivery status */
-        getInfo: () => Promise<MessageInfo | null>,
+        getInfo: () => Promise<MessageInfo | null>;
         /**
          * Gets the order associated with a given message
          */
-        getOrder: () => Promise<Order>,
+        getOrder: () => Promise<Order>;
         /**
          * Gets the payment details associated with a given message
          */
-        getPayment: () => Promise<Payment>,
+        getPayment: () => Promise<Payment>;
         /**
          * Gets the reactions associated with the given message
          */
-        getReactions: () => Promise<ReactionList[]>,
+        getReactions: () => Promise<ReactionList[]>;
         /** Edits the current message */
-        edit: (content: MessageContent, options?: MessageEditOptions) => Promise<Message | null>,
+        edit: (content: MessageContent, options?: MessageEditOptions) => Promise<Message | null>;
     }
 
     /** ID that represents a message */
diff --git a/node_modules/whatsapp-web.js/src/Client.js b/node_modules/whatsapp-web.js/src/Client.js
index 14a7804..5a1c57d 100644
--- a/node_modules/whatsapp-web.js/src/Client.js
+++ b/node_modules/whatsapp-web.js/src/Client.js
@@ -62,7 +62,7 @@ class Client extends EventEmitter {
 
         this.options = Util.mergeDefault(DefaultOptions, options);
 
-        if(!this.options.authStrategy) {
+        if (!this.options.authStrategy) {
             this.authStrategy = new NoAuth();
         } else {
             this.authStrategy = this.options.authStrategy;
@@ -92,13 +92,13 @@ class Client extends EventEmitter {
             page = await browser.newPage();
         } else {
             const browserArgs = [...(puppeteerOpts.args || [])];
-            if(!browserArgs.find(arg => arg.includes('--user-agent'))) {
+            if (!browserArgs.find(arg => arg.includes('--user-agent'))) {
                 browserArgs.push(`--user-agent=${this.options.userAgent}`);
             }
             // navigator.webdriver fix
             browserArgs.push('--disable-blink-features=AutomationControlled');
 
-            browser = await puppeteer.launch({...puppeteerOpts, args: browserArgs});
+            browser = await puppeteer.launch({ ...puppeteerOpts, args: browserArgs });
             page = (await browser.pages())[0];
         }
 
@@ -203,7 +203,7 @@ class Client extends EventEmitter {
         // Scan-qrcode selector was found. Needs authentication
         if (needAuthentication) {
             const { failed, failureEventPayload, restart } = await this.authStrategy.onAuthenticationNeeded();
-            if(failed) {
+            if (failed) {
                 /**
                  * Emitted when there has been an error while trying to restore an existing session
                  * @event Client#auth_failure
@@ -268,7 +268,7 @@ class Client extends EventEmitter {
             // Wait for code scan
             try {
                 await page.waitForSelector(INTRO_IMG_SELECTOR, { timeout: 0 });
-            } catch(error) {
+            } catch (error) {
                 if (
                     error.name === 'ProtocolError' &&
                     error.message &&
@@ -534,7 +534,7 @@ class Client extends EventEmitter {
 
         });
 
-        await page.exposeFunction('onChatUnreadCountEvent', async (data) =>{
+        await page.exposeFunction('onChatUnreadCountEvent', async (data) => {
             const chat = await this.getChatById(data.id);
 
             /**
@@ -669,7 +669,7 @@ class Client extends EventEmitter {
 
         await page.exposeFunction('onEditMessageEvent', (msg, newBody, prevBody) => {
 
-            if(msg.type === 'revoked'){
+            if (msg.type === 'revoked') {
                 return;
             }
             /**
@@ -706,7 +706,7 @@ class Client extends EventEmitter {
             window.Store.Chat.on('change:archive', async (chat, currState, prevState) => { window.onArchiveChatEvent(await window.WWebJS.getChatModel(chat), currState, prevState); });
             window.Store.Msg.on('add', (msg) => {
                 if (msg.isNewMsg) {
-                    if(msg.type === 'ciphertext') {
+                    if (msg.type === 'ciphertext') {
                         // defer message event until ciphertext is resolved (type changed)
                         msg.once('change:type', (_msg) => window.onAddMessageEvent(window.WWebJS.getMessageModel(_msg)));
                         window.onAddMessageCiphertextEvent(window.WWebJS.getMessageModel(msg));
@@ -715,7 +715,7 @@ class Client extends EventEmitter {
                     }
                 }
             });
-            window.Store.Chat.on('change:unreadCount', (chat) => {window.onChatUnreadCountEvent(chat);});
+            window.Store.Chat.on('change:unreadCount', (chat) => { window.onChatUnreadCountEvent(chat); });
 
             {
                 const module = window.Store.createOrUpdateReactionsModule;
@@ -726,7 +726,7 @@ class Client extends EventEmitter {
                         const parentMsgKey = window.Store.MsgKey.fromString(reaction.parentMsgKey);
                         const timestamp = reaction.timestamp / 1000;
 
-                        return {...reaction, msgKey, parentMsgKey, timestamp };
+                        return { ...reaction, msgKey, parentMsgKey, timestamp };
                     }));
 
                     return ogMethod(...args);
@@ -744,7 +744,7 @@ class Client extends EventEmitter {
         // Disconnect when navigating away when in PAIRING state (detect logout)
         this.pupPage.on('framenavigated', async () => {
             const appState = await this.getState();
-            if(!appState || appState === WAState.PAIRING) {
+            if (!appState || appState === WAState.PAIRING) {
                 await this.authStrategy.disconnect();
                 this.emit(Events.DISCONNECTED, 'NAVIGATION');
                 await this.destroy();
@@ -759,10 +759,10 @@ class Client extends EventEmitter {
         const requestedVersion = this.options.webVersion;
         const versionContent = await webCache.resolve(requestedVersion);
 
-        if(versionContent) {
+        if (versionContent) {
             await this.pupPage.setRequestInterception(true);
             this.pupPage.on('request', async (req) => {
-                if(req.url() === WhatsWebURL) {
+                if (req.url() === WhatsWebURL) {
                     req.respond({
                         status: 200,
                         contentType: 'text/html',
@@ -774,7 +774,7 @@ class Client extends EventEmitter {
             });
         } else {
             this.pupPage.on('response', async (res) => {
-                if(res.ok() && res.url() === WhatsWebURL) {
+                if (res.ok() && res.url() === WhatsWebURL) {
                     const indexHtml = await res.text();
                     this.currentIndexHtml = indexHtml;
                 }
@@ -869,6 +869,8 @@ class Client extends EventEmitter {
      * @returns {Promise<Message>} Message that was just sent
      */
     async sendMessage(chatId, content, options = {}) {
+
+
         if (options.mentions) {
             !Array.isArray(options.mentions) && (options.mentions = [options.mentions]);
             if (options.mentions.some((possiblyContact) => possiblyContact instanceof Contact)) {
@@ -898,12 +900,12 @@ class Client extends EventEmitter {
         if (content instanceof MessageMedia) {
             internalOptions.attachment = content;
             internalOptions.isViewOnce = options.isViewOnce,
-            content = '';
+                content = '';
         } else if (options.media instanceof MessageMedia) {
             internalOptions.attachment = options.media;
             internalOptions.caption = content;
             internalOptions.isViewOnce = options.isViewOnce,
-            content = '';
+                content = '';
         } else if (content instanceof Location) {
             internalOptions.location = content;
             content = '';
@@ -928,24 +930,29 @@ class Client extends EventEmitter {
         if (internalOptions.sendMediaAsSticker && internalOptions.attachment) {
             internalOptions.attachment = await Util.formatToWebpSticker(
                 internalOptions.attachment, {
-                    name: options.stickerName,
-                    author: options.stickerAuthor,
-                    categories: options.stickerCategories
-                }, this.pupPage
+                name: options.stickerName,
+                author: options.stickerAuthor,
+                categories: options.stickerCategories
+            }, this.pupPage
             );
         }
 
         const newMessage = await this.pupPage.evaluate(async (chatId, message, options, sendSeen) => {
-            const chatWid = window.Store.WidFactory.createWid(chatId);
-            const chat = await window.Store.Chat.find(chatWid);
+            try {
+                const chatWid = window.Store.WidFactory.createWid(chatId);
+                const chat = await window.Store.Chat.find(chatWid);
 
 
-            if (sendSeen) {
-                await window.WWebJS.sendSeen(chatId);
-            }
+                if (sendSeen) {
+                    await window.WWebJS.sendSeen(chatId);
+                }
 
-            const msg = await window.WWebJS.sendMessage(chat, message, options, sendSeen);
-            return window.WWebJS.getMessageModel(msg);
+                const msg = await window.WWebJS.sendMessage(chat, message, options, sendSeen);
+                return window.WWebJS.getMessageModel(msg);
+            } catch (e) {
+                console.warn(e);
+                console.log({ chatId, message, options, sendSeen });
+            }
         }, chatId, content, internalOptions, sendSeen);
 
         return new Message(this, newMessage);
@@ -1022,18 +1029,18 @@ class Client extends EventEmitter {
     async getMessageById(messageId) {
         const msg = await this.pupPage.evaluate(async messageId => {
             let msg = window.Store.Msg.get(messageId);
-            if(msg) return window.WWebJS.getMessageModel(msg);
+            if (msg) return window.WWebJS.getMessageModel(msg);
 
             const params = messageId.split('_');
-            if(params.length !== 3) throw new Error('Invalid serialized message id specified');
+            if (params.length !== 3) throw new Error('Invalid serialized message id specified');
 
             let messagesObject = await window.Store.Msg.getMessagesById([messageId]);
             if (messagesObject && messagesObject.messages.length) msg = messagesObject.messages[0];
 
-            if(msg) return window.WWebJS.getMessageModel(msg);
+            if (msg) return window.WWebJS.getMessageModel(msg);
         }, messageId);
 
-        if(msg) return new Message(this, msg);
+        if (msg) return new Message(this, msg);
         return null;
     }
 
@@ -1094,7 +1101,7 @@ class Client extends EventEmitter {
      */
     async setDisplayName(displayName) {
         const couldSet = await this.pupPage.evaluate(async displayName => {
-            if(!window.Store.Conn.canSetMyPushname()) return false;
+            if (!window.Store.Conn.canSetMyPushname()) return false;
             await window.Store.Settings.setPushname(displayName);
             return true;
         }, displayName);
@@ -1108,7 +1115,7 @@ class Client extends EventEmitter {
      */
     async getState() {
         return await this.pupPage.evaluate(() => {
-            if(!window.Store) return null;
+            if (!window.Store) return null;
             return window.Store.AppState.state;
         });
     }
@@ -1202,7 +1209,7 @@ class Client extends EventEmitter {
         unmuteDate = unmuteDate ? unmuteDate.getTime() / 1000 : -1;
         await this.pupPage.evaluate(async (chatId, timestamp) => {
             let chat = await window.Store.Chat.get(chatId);
-            await chat.mute.mute({expiration: timestamp, sendDevice:!0});
+            await chat.mute.mute({ expiration: timestamp, sendDevice: !0 });
         }, chatId, unmuteDate || -1);
     }
 
@@ -1237,9 +1244,9 @@ class Client extends EventEmitter {
         const profilePic = await this.pupPage.evaluate(async contactId => {
             try {
                 const chatWid = window.Store.WidFactory.createWid(contactId);
-                return await window.Store.ProfilePic.profilePicFind(chatWid);
+                return await window.Store.ProfilePic.requestProfilePicFromServer(chatWid);
             } catch (err) {
-                if(err.name === 'ServerStatusCodeError') return undefined;
+                if (err.name === 'ServerStatusCodeError') return undefined;
                 throw err;
             }
         }, contactId);
@@ -1257,8 +1264,8 @@ class Client extends EventEmitter {
             let contact = window.Store.Contact.get(contactId);
             if (!contact) {
                 const wid = window.Store.WidFactory.createUserWid(contactId);
-                const chatConstructor = window.Store.Contact.getModelsArray().find(c=>!c.isGroup).constructor;
-                contact = new chatConstructor({id: wid});
+                const chatConstructor = window.Store.Contact.getModelsArray().find(c => !c.isGroup).constructor;
+                contact = new chatConstructor({ id: wid });
             }
 
             if (contact.commonGroups) {
@@ -1565,12 +1572,12 @@ class Client extends EventEmitter {
             const labels = window.WWebJS.getLabels().filter(e => labelIds.find(l => l == e.id) !== undefined);
             const chats = window.Store.Chat.filter(e => chatIds.includes(e.id._serialized));
 
-            let actions = labels.map(label => ({id: label.id, type: 'add'}));
+            let actions = labels.map(label => ({ id: label.id, type: 'add' }));
 
             chats.forEach(chat => {
                 (chat.labels || []).forEach(n => {
                     if (!actions.find(e => e.id == n)) {
-                        actions.push({id: n, type: 'remove'});
+                        actions.push({ id: n, type: 'remove' });
                     }
                 });
             });
